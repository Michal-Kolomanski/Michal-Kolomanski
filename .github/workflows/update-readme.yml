name: Update README with Race Counters

on:
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight UTC
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [ main ] # Also run when you push to main

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with race counters
        run: |
          # Workflow:
          # 1) Update "Days Left" column automatically
          # 2) Create automatically "Completed Races" table - sort results by "Event Type" and sort DESC by Result, give a golden medal!
          # Result sorting logic:
          # - For normal races: less time - the better
          # - For Backyard Ultra: distance (hours) - more distance/time - the better
          
          # How to maintain?
          # Define race data in a structured way
          # Format: "RACE_NAME|EVENT_TYPE|DATE|GOAL" for upcoming races
          # Format: "RACE_NAME|EVENT_TYPE|DATE|LINKS|RESULT" for completed races
          # 
          # DATE formats supported:
          # - Single day: "2025-08-03"
          # - Date range: "2025-09-19:2025-09-20" (start:end)
          
          declare -a UPCOMING_RACE_DATA=(
          )
          
          declare -a COMPLETED_RACE_DATA=(
            "üèÉ Pozna≈Ñ Marathon 2025|Marathon|2025-10-12|[Strava](https://www.strava.com/activities/16115706270) [Relation](https://www.instagram.com/p/DPy-G-tjSyz/)|03:44:17"
            "üèÉ Warsaw Marathon 2024|Marathon|2024-09-29|[Strava](https://www.strava.com/activities/12531323025?utm_source=ios_share&utm_medium=social&share_sig=64733EDE1727629711&fbclid=PAZXh0bgNhZW0CMTEAAafc8yzW3ii9koA5-nxJkRaHQcIKrkDxQwfKWHDcuNoJXgM7RShyWIzuXiA0WQ_aem_mur5gamWZZW6bKzKw2Svjg&_branch_match_id=1401898015619269921&_branch_referrer=H4sIAAAAAAAAAwXB2wqCMBgA4LfprpROViAxLDylZAYTb2SzuS2P%2FJ696Nn7PtF1TXtRlLYDMpANaZpNIatc6S3TfHh7Tfj0mtG0kB%2F9ieJIqJT7Isaq4b3vCJEsPc0L3kl5zmt0WFeTk7%2BIFaS2C%2FltCsbMxdYt7f3aibinvUIxY3vpI4lUHCSElUnZw4GTEscxPlJ3ccdtOHz56gcsYwCy4gmFemwZ6IaAumR%2Fdhh%2BPbAAAAA%3D)|03:58:27"
            "üèÉ Krak√≥w Marathon 2024|Marathon|2024-04-14|[Strava](https://www.strava.com/activities/11179716421?share_sig=3UIZY2OL1713105528&utm_medium=social&utm_source=android_share)|04:29:31"
            "üèÉ Warsaw Marathon 2023|Marathon|2023-09-24|[Strava](https://www.strava.com/activities/9911396841?share_sig=VAA0D44U1713105286&utm_medium=social&utm_source=android_share)|05:47:17"
            "üèä‚Äç‚ôÇÔ∏èüö¥üèÉ IRONMAN 70.3 Krak√≥w|IRONMAN 70.3|2025-08-03|[Swim](https://www.strava.com/activities/15330199249) [Bike](https://www.strava.com/activities/15331983225) [Run](https://www.strava.com/activities/15330206515) [Summary](https://www.instagram.com/p/DNGo1IwsmK0)|06:18:19"
            "üèÉ Backyard Ultra Zag≈Çƒôbie|Backyard Ultra|2025-09-19|[Strava](https://www.strava.com/activities/15868592716) [Instagram](https://www.instagram.com/stories/highlights/18078026911986589/) [Results](https://wpzd.pl/backyard-ultra-zaglebie/wyniki/buz-2025/)|55km (8h) - 88th place"
            "üö¥ Ride Across Poland (Suwa≈Çki-≈öwinouj≈õcie)|üáµüá± EAST-WEST|2025-07-11:2025-07-19|[1](https://www.strava.com/activities/15092278881) [2](https://www.strava.com/activities/15104903349) [3](https://www.strava.com/activities/15115077577) [4](https://www.strava.com/activities/15127042485) [5](https://www.strava.com/activities/15137970114) [6](https://www.strava.com/activities/15147765776) [7](https://www.strava.com/activities/15158829706) [Summary](https://www.instagram.com/p/DMSU81gMNCl/?img_index=1)|Distance: 943km, Time: 7 days"
          )
          
          # Function to parse date (single or range)
          parse_date() {
            local date_input="$1"
            local parse_type="$2"  # "start", "end", or "display"
            
            if [[ "$date_input" == *":"* ]]; then
              # Date range format: start:end
              IFS=':' read -r start_date end_date <<< "$date_input"
              
              case "$parse_type" in
                "start")
                  echo "$start_date"
                  ;;
                "end")
                  echo "$end_date"
                  ;;
                "display")
                  # Format: YYYY.MM.DD-YYYY.MM.DD
                  start_display=$(date -d "$start_date" +"%Y.%m.%d")
                  end_display=$(date -d "$end_date" +"%Y.%m.%d")
                  echo "$start_display-$end_display"
                  ;;
              esac
            else
              # Single date
              case "$parse_type" in
                "start"|"end")
                  echo "$date_input"
                  ;;
                "display")
                  date -d "$date_input" +"%Y.%m.%d"
                  ;;
              esac
            fi
          }
          
          # Get current date
          CURRENT_DATE=$(date +%Y-%m-%d)
          CURRENT_TIMESTAMP=$(date +"%B %d, %Y")
          
          # Initialize tables
          UPCOMING_RACES=""
          COMPLETED_RACES=""
          
          # Process upcoming races
          for race in "${UPCOMING_RACE_DATA[@]}"; do
            IFS='|' read -r name event_type date goal <<< "$race"
            
            # Parse dates
            START_DATE=$(parse_date "$date" "start")
            END_DATE=$(parse_date "$date" "end")
            DISPLAY_DATE=$(parse_date "$date" "display")
            
            # Calculate days until race start
            DAYS_DIFF=$(( ($(date -d "$START_DATE" +%s) - $(date -d "$CURRENT_DATE" +%s)) / 86400 ))
            
            # Check if we're currently in the event (between start and end date)
            CURRENT_TIMESTAMP_SEC=$(date -d "$CURRENT_DATE" +%s)
            START_TIMESTAMP_SEC=$(date -d "$START_DATE" +%s)
            END_TIMESTAMP_SEC=$(date -d "$END_DATE" +%s)
            
            if [ $CURRENT_TIMESTAMP_SEC -ge $START_TIMESTAMP_SEC ] && [ $CURRENT_TIMESTAMP_SEC -le $END_TIMESTAMP_SEC ]; then
              DAYS_DISPLAY="**HAPPENING NOW!** üöÄ"
            elif [ $DAYS_DIFF -lt 0 ]; then
              DAYS_DISPLAY="**Completed** üèÅ"
            elif [ $DAYS_DIFF -eq 0 ]; then
              DAYS_DISPLAY="**TODAY!** üöÄ"
            else
              DAYS_DISPLAY="**${DAYS_DIFF} days** ‚è≥"
            fi
            
            UPCOMING_RACES="${UPCOMING_RACES}| $name | $event_type | $DISPLAY_DATE | $DAYS_DISPLAY | $goal |\n"
          done
          
          # Process completed races and sort them
          for race in "${COMPLETED_RACE_DATA[@]}"; do
            IFS='|' read -r name event_type date links result <<< "$race"
            
            # Parse display date for completed races
            DISPLAY_DATE=$(parse_date "$date" "display")
            
            COMPLETED_RACES="${COMPLETED_RACES}$event_type|$result|$name|$DISPLAY_DATE|$links\n"
          done
          
          # Sort completed races by event type, then by result (time), then by date (latest first)
          if [ ! -z "$COMPLETED_RACES" ]; then
            SORTED_COMPLETED=$(echo -e "$COMPLETED_RACES" | sort -t'|' -k1,1 -k2,2 -k3,3r)
            
            # Find best result for each event type
            declare -A BEST_RESULTS
            declare -A BEST_VALUES
            
            while IFS='|' read -r event_type result name date links; do
              if [ ! -z "$event_type" ]; then
                comparison_value=""
                
                # Determine scoring logic based on event type
                if [[ "$event_type" == *"Backyard Ultra"* ]]; then
                  # For Backyard Ultra: longer time/distance is better
                  # Support formats: "100km (15h)", "16h", "100km", "24"
                  if [[ "$result" =~ ([0-9]+)km.*\(([0-9]+)h\) ]]; then
                    # Format: "100km (15h)" - use distance as primary, time as secondary
                    distance=${BASH_REMATCH[1]}
                    hours=${BASH_REMATCH[2]}
                    comparison_value=$((distance * 1000 + hours))  # Distance weighted higher
                    is_higher_better=true
                  elif [[ "$result" =~ ([0-9]+)km ]]; then
                    # Format: "100km"
                    comparison_value=${BASH_REMATCH[1]}
                    is_higher_better=true
                  elif [[ "$result" =~ ([0-9]+)h ]]; then
                    # Format: "16h"
                    comparison_value=${BASH_REMATCH[1]}
                    is_higher_better=true
                  elif [[ "$result" =~ ^([0-9]+)$ ]]; then
                    # Format: just number "24"
                    comparison_value=${BASH_REMATCH[1]}
                    is_higher_better=true
                  fi
                else
                  # For regular races: shorter time is better (convert HH:MM:SS to seconds)
                  if [[ "$result" =~ ^[0-9]{1,2}:[0-9]{2}:[0-9]{2}$ ]]; then
                    IFS=':' read -r hours minutes seconds <<< "$result"
                    comparison_value=$((hours * 3600 + minutes * 60 + seconds))
                    is_higher_better=false
                  fi
                fi
                
                # Check if this is the best result for this event type
                if [ ! -z "$comparison_value" ]; then
                  if [ -z "${BEST_RESULTS[$event_type]}" ]; then
                    BEST_RESULTS[$event_type]=$comparison_value
                    BEST_VALUES[$event_type]=$result
                  else
                    current_best=${BEST_RESULTS[$event_type]}
                    if [[ "$event_type" == *"Backyard Ultra"* ]]; then
                      # Higher is better for Backyard Ultra
                      if [ "$comparison_value" -gt "$current_best" ]; then
                        BEST_RESULTS[$event_type]=$comparison_value
                        BEST_VALUES[$event_type]=$result
                      fi
                    else
                      # Lower is better for time-based races
                      if [ "$comparison_value" -lt "$current_best" ]; then
                        BEST_RESULTS[$event_type]=$comparison_value
                        BEST_VALUES[$event_type]=$result
                      fi
                    fi
                  fi
                fi
              fi
            done <<< "$SORTED_COMPLETED"
            
            # Build the completed table with gold medals
            COMPLETED_TABLE=""
            while IFS='|' read -r event_type result name date links; do
              if [ ! -z "$event_type" ]; then
                MEDAL=""
                
                # Check if this is the best result for this event type
                if [ "$result" = "${BEST_VALUES[$event_type]}" ]; then
                  MEDAL=" ü•á"
                fi
                
                COMPLETED_TABLE="${COMPLETED_TABLE}| $name | $event_type | $date | $links | $result$MEDAL |\n"
              fi
            done <<< "$SORTED_COMPLETED"
          fi
          
          # Create a temporary file to build the new README
          cp README.md README_backup.md
          
          # Find the start and end of the race sections
          START_UPCOMING=$(grep -n "### ‚è±Ô∏è Upcoming Races" README.md | cut -d: -f1)
          START_COMPLETED=$(grep -n "### ‚úÖ Completed Races" README.md | cut -d: -f1)
          END_TIMESTAMP=$(grep -n "\*ü§ñ Auto-updated:" README.md | cut -d: -f1)
          
          if [ -z "$START_UPCOMING" ] || [ -z "$END_TIMESTAMP" ]; then
            echo "Could not find race sections in README.md"
            exit 1
          fi
          
          # Extract parts of README
          BEFORE_RACES=$(head -n $((START_UPCOMING - 1)) README.md)
          AFTER_RACES=$(tail -n +$((END_TIMESTAMP + 1)) README.md)
          
          # Build new README
          {
            echo "$BEFORE_RACES"
            
            # Add upcoming races section
            if [ -z "$UPCOMING_RACES" ]; then
              # No upcoming races - show the Harry Potter reference
              echo "### ‚è±Ô∏è Upcoming Races"
              echo ""
              echo "> *\"The season has ended, but rest assured I solemnly swear that I am up to no good! üßô‚Äç‚ôÇÔ∏è \"*"
              echo ""
            else
              echo "### ‚è±Ô∏è Upcoming Races"
              echo "| Race | Event Type | Date | Days Left | Goal |"
              echo "|------|------------|------|-----------|------|"
              echo -e "$UPCOMING_RACES"
            fi
            
            # Add completed races section
            if [ ! -z "$COMPLETED_TABLE" ]; then
              echo "### ‚úÖ Completed Races"
              echo "| Race | Event Type | Date | Links | Result |"
              echo "|------|------------|------|-------|--------|"
              echo -e "$COMPLETED_TABLE"
            fi
            
            echo ""
            echo "*ü§ñ Auto-updated: $CURRENT_TIMESTAMP*"
            echo ""
            echo "$AFTER_RACES"
            
          } > README_new.md
          
          # Replace original README
          mv README_new.md README.md
          
          # Clean up
          rm -f README_backup.md

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are changes
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add README.md
            git commit -m "ü§ñ Update race countdown - $(date +%Y-%m-%d)"
            git push
          fi